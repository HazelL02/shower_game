-----------------------------------------------------------------------------------------
--
-- game.lua
--
-----------------------------------------------------------------------------------------

local composer = require( "composer" )
local scene = composer.newScene()
local game_mode = 0

function scene:create( event )
	local sceneGroup = self.view
	physics.start()
	--physics.setDrawMode("hybrid")
	
	-- Called when the scene's view does not exist.
	-- 
	-- INSERT code here to initialize the scene
	-- e.g. add display objects to 'sceneGroup', add touch listeners, etc.
	
	
	local background = display.newImageRect("image/background.png", display.contentWidth, display.contentHeight )
	background.x, background.y = display.contentWidth/2, display.contentHeight/2

	local bear = display.newImage("image/bear1.png") 
	bearX, bearY = display.contentWidth * 0.492, display.contentHeight * 0.495
	bear.x, bear.y = bearX, bearY
	bear.name = "bear"
	local bear_outline = graphics.newOutline(5, "image/bear1.png")
	physics.addBody(bear, "dynamic", {outline = bear_outline})

	local bearBubble = display.newImage("image/bear2.png") 
	bearBubble.x, bearBubble.y = bearX, bearY
	bearBubble.name = "bear"
	local bearBubble_outline = graphics.newOutline(5, "image/bear2.png")
	bearBubble.alpha = 0

	local bearWater = display.newImage("image/bear3.png") 
	bearWater.x, bearWater.y = bearX, bearY
	bearWater.name = "bear"
	local bearWater_outline = graphics.newOutline(5, "image/bear3.png")
	bearWater.alpha = 0

	local bearFinal = display.newImage("image/bear4.png") 
	bearFinal.x, bearFinal.y = bearX, bearY
	bearFinal.name = "bear"
	local bearFinal_outline = graphics.newOutline(5, "image/bear4.png")
	bearFinal.alpha = 0


	local a = display.newImageRect("image/bunny.png", display.contentWidth*0.3, display.contentHeight * 0.1)
	a.x, a.y =  display.contentWidth*0.25, display.contentHeight * 0.8425
	physics.addBody(a, "static")
	a.alpha = 0

	local a2 = display.newImageRect("image/bunny.png", display.contentWidth*0.5, display.contentHeight * 0.2)
	a2.x, a2.y =  display.contentWidth*0.7, display.contentHeight * 0.995
	physics.addBody(a2, "static")
	a2.alpha = 0

	local a2 = display.newImageRect("image/bunny.png", display.contentWidth*0.2, display.contentHeight * 0.5)
	a2.x, a2.y =  display.contentWidth*0.66, display.contentHeight * 0.99
	physics.addBody(a2, "static")
	a2.alpha = 0

	local buttonSoap = display.newImage("image/buttonSoap.png")
	soapX, soapY = display.contentWidth * 0.65, display.contentHeight *0.7
	buttonSoap.x, buttonSoap.y = soapX, soapY

	local buttonWater = display.newImage("image/buttonWater.png")
	waterX, waterY = display.contentWidth * 0.78, display.contentHeight *0.7
	buttonWater.x, buttonWater.y = waterX, waterY
	
	local buttonFan = display.newImage("image/buttonFan.png")
	fanX, fanY = display.contentWidth * 0.91, display.contentHeight *0.7
	buttonFan.x, buttonFan.y = fanX, fanY

	local soap = display.newImage("image/selectSoap.png")
	soap.x, soap.y = soapX, soapY
	local soap_outline = graphics.newOutline(5, "image/selectSoap.png")
	physics.addBody(soap, "kinematic", {outline = soap_outline, isSensor = true, density = 60, friction = 20})
	soap.alpha = 0

	local water = display.newImage("image/selectWater.png")
	water.x, water.y = waterX, waterY
	local water_outline = graphics.newOutline(100, "image/selectWater.png")
	physics.addBody(water, "kinematic", { isSensor = true, density = 50 })
	water.alpha = 0

	local fan = display.newImage("image/selectFan.png")
	fan.x, fan.y = fanX, fanY
	local fan_outline = graphics.newOutline(5, "image/selectFan.png")
	physics.addBody(fan, "kinematic", {outline = fan_outline, isSensor = true, density = 100})
	fan.alpha = 0

	local gaugeBar = display.newImage("image/gaugeBar.png")
	gaugeBar.x, gaugeBar.y = display.contentWidth * 0.05, display.contentHeight *0.5
	gaugeBar.alpha = 0
	local setting = display.newImageRect("image/soap.png", 100, 100)
	setting.x, setting.y = display.contentWidth * 0.948, display.contentHeight * 0.1

	local gaugeSoap = display.newImageRect("image/buttonSoap.png", 150, 150)
	gaugeSoap.x, gaugeSoap.y = display.contentWidth * 0.05, display.contentHeight * 0.155
	gaugeSoap.alpha = 0

	local gaugeFan = display.newImageRect("image/buttonFan.png", 150, 150)
	gaugeFan.x, gaugeFan.y = display.contentWidth * 0.05, display.contentHeight * 0.155
	gaugeFan.alpha = 0

	local gaugeUnit = {}

	local alert = {}
	alert[1] = display.newText("비누칠을 해주세요", display.contentWidth/2, display.contentHeight*0.3)
	alert[2] = display.newText("물로 헹궈주세요", display.contentWidth/2, display.contentHeight*0.3)
	alert[3] = display.newText("부채로 웅녀를 말려주세요", display.contentWidth/2, display.contentHeight*0.3)
	for i = 1, 3 do
		alert[i].size = 100
		alert[i].alpha = 0
		alert[i]:setFillColor(0)
	end
	sceneGroup:insert(background)
	sceneGroup:insert(bear)
	sceneGroup:insert(bearFinal)
	sceneGroup:insert(bearWater)
	sceneGroup:insert(bearBubble)

	sceneGroup:insert(buttonSoap)
	sceneGroup:insert(buttonWater)
	sceneGroup:insert(buttonFan)
	sceneGroup:insert(gaugeBar)
	sceneGroup:insert(setting)
	sceneGroup:insert(soap)
	sceneGroup:insert(water)
	sceneGroup:insert(fan)
	sceneGroup:insert(gaugeSoap)
	sceneGroup:insert(gaugeFan)

	local function btn_tap_soap (event)
		if (game_mode == 0) then
			soap.alpha = 1
			gaugeBar.alpha = 1
			gaugeSoap.alpha = 1
		elseif (game_mode == 1) then
			alert[2].alpha = 1
			timer.performWithDelay(1000, function()
				alert[2].alpha = 0
			end)
		elseif (game_mode == 2) then
			alert[3].alpha = 1
			timer.performWithDelay(1000, function()
				alert[3].alpha = 0
			end)
		end
	end
	buttonSoap:addEventListener("tap", btn_tap_soap)

	local function btn_tap_water (event)
		if (game_mode == 1) then
			water.alpha = 1
		elseif (game_mode == 0) then
			alert[1].alpha = 1
			timer.performWithDelay(1000, function()
				alert[1].alpha = 0
			end)
		elseif (game_mode == 2) then
			alert[3].alpha = 1
			timer.performWithDelay(1000, function()
				alert[3].alpha = 0
			end)
		end
	end
	buttonWater:addEventListener("tap", btn_tap_water)

	local function btn_tap_fan (event)
		if (game_mode == 2)	then
			fan.alpha = 1
			gaugeBar.alpha = 1
			gaugeFan.alpha = 1
		elseif (game_mode == 0) then
			alert[1].alpha = 1
			timer.performWithDelay(1000, function()
				alert[1].alpha = 0
			end)
		elseif (game_mode == 1) then
			alert[2].alpha = 1
			timer.performWithDelay(1000, function()
				alert[2].alpha = 0
			end)
		end
	end
	buttonFan:addEventListener("tap", btn_tap_fan)

	local function drag( event )
		if( event.phase == "began" ) then
			display.getCurrentStage():setFocus( event.target )
			event.target.isFocus = true
		elseif( event.phase == "moved" ) then
			if ( event.target.isFocus ) then
				event.target.x = event.xStart + event.xDelta
				event.target.y = event.yStart + event.yDelta
			end
		elseif ( event.phase == "ended" or event.phase == "cancelled") then
			if ( event.target.isFocus ) then
				display.getCurrentStage():setFocus( nil )
				event.target.isFocus = false
			else
				display.getCurrentStage():setFocus( nil )
				event.target.isFocus = false
			end
		end
	end

	function addEvent (event)
		soap:addEventListener("touch", drag)
		water:addEventListener("touch", drag)
		fan:addEventListener("touch", drag)
	end
	addEvent()

	function removeEvent (event)
		soap:removeEventListener("touch", drag)
		water:removeEventListener("touch", drag)
		fan:removeEventListener("touch", drag)
	end
	



	local score = display.newText(0, display.contentWidth*0.85, display.contentHeight*0.9)
	score.size = 100
	score:setFillColor(0)
	sceneGroup:insert(score)

	--타이머 변수
	local time = display.newText(30, display.contentWidth*0.645, display.contentHeight*0.9)
	time.size = 100
	time:setFillColor(0)
	time.alpha = 0.7
	sceneGroup:insert(time)

	local function counter(event)
		time.text = time.text - 1
		if (time.text == '-1') then
			composer.setVariable("ending_score", tonumber(score.text))
			physics.stop()
			composer.gotoScene("ending")
		end
	end
	local timeAttack = timer.performWithDelay(1000, counter, 31)

	local function tap (event)
		timer.pause(timeAttack)
		composer.setVariable("timeAttack", timeAttack)
		composer.setVariable("soap", soap)
		composer.setVariable("water", water)
		composer.setVariable("fan", fan)
		composer.setVariable("game_mode", game_mode)
		composer.showOverlay("setting")
		if (game_mode == 0) then
			removeEvent()
		elseif (game_mode == 1) then
			water:removeEventListener("touch", drag)
			fan:removeEventListener("touch", drag)
		elseif (game_mode == 2) then
			fan:removeEventListener("touch", drag)
		end
	end
	setting:addEventListener("tap", tap)

	local count = 0
	local i = 1
	
	function bear_Soap (self, event)
		if(event.phase == "ended") then
			if (event.other.name == "bear") then
				count = count + 1
				if (count % 3 == 0) then
					score.text = score.text + 1
				end
				
				if (tonumber(score.text) >= 50) then
					bearBubble.alpha = bearBubble.alpha + 0.01
					bear.alpha = bear.alpha - 0.005
					if (tonumber(score.text) >= 80) then
						bear.alpha = bear.alpha - 0.1
					end
				end
				bearBubble.alpha = bearBubble.alpha + 0.005

				if (count % 15  == 0) then
					print(i)
					gaugeUnit[i] = display.newImage("image/gaugeUnit.png")
					gaugeUnit[i].x, gaugeUnit[i].y = display.contentWidth * 0.05, display.contentHeight * 0.79 - 30*i
					i = i + 1
				end
				if (tonumber(score.text) >= 100) then
					display.remove(event.target)
					game_mode = 1
					print(game_mode)

					timer.performWithDelay(10, function()
						physics.removeBody(event.other)
						
					end)
					timer.performWithDelay(300, function()
						for j = 1, 20 do
							gaugeUnit[j]:removeSelf()
						end
						gaugeBar.alpha = 0
						i = 1
						gaugeSoap.alpha = 0
						physics.addBody(bearBubble, "dynamic", {outline = bear_outline})
					end)
					
				end
			end	
		end
	end
	soap.collision = bear_Soap
	soap:addEventListener("collision")

	local waterFlag = 0
	function bear_Water (self, event)
		if(event.phase == "ended" and waterFlag == 0 and game_mode == 1) then
			if (event.other.name == "bear") then
				display.remove(event.target)
				local water2 = display.newImage("image/selectWater.png")
				water2.x, water2.y = display.contentWidth*0.35, display.contentHeight*0.2
				score.text = score.text + 100
				waterFlag = 1
				game_mode = 2
				
				fan:removeEventListener("touch", drag)
				timer.performWithDelay(10, function()
					physics.removeBody(event.other)
				end)
				
				bearWater.alpha = 0.2
				local timeAttackB = timer.performWithDelay(5, function()
					bearBubble.alpha = bearBubble.alpha - 0.005
					--bearWater.alpha = bearWater.alpha + 0.07
				end, 300)
				timer.performWithDelay(5, function()
					bearWater.alpha = bearWater.alpha + 0.07
				end, 14)
				timer.performWithDelay(2000, function()
					display.remove(water2)
					physics.removeBody(bearBubble)
					physics.addBody(bearWater, "dynamic", {outline = bear_outline})
					fan:addEventListener("touch", drag)
				end)
			end
		end
	end
	water.collision = bear_Water
	water:addEventListener("collision")

	local countFan = 0
	function bear_Fan (self, event)
		if(event.phase == "ended" and game_mode == 2) then
			if (event.other.name == "bear") then
				countFan = countFan + 1
				if (countFan % 3 == 0) then
					score.text = score.text + 1
				end
				if (tonumber(score.text) >= 250) then
					bearFinal.alpha = bearFinal.alpha + 0.05
					bearWater.alpha = bearWater.alpha - 0.005
					if (tonumber(score.text) >= 280) then
						bearFinal.alpha = bearFinal.alpha + 0.1
						bearWater.alpha = bearWater.alpha - 0.2
					end
				end
				if(countFan % 15 == 0) then
					print(i)
					gaugeUnit[i] = display.newImage("image/gaugeUnit.png")
					gaugeUnit[i].x, gaugeUnit[i].y = display.contentWidth * 0.05, display.contentHeight * 0.79 - 30*i
					i = i + 1
				end
			end
			if (tonumber(score.text) >= 300) then
				display.remove(bearWater)
				game_mode = 3
				
				timer.performWithDelay(2000, function()
					for j = 1, 20 do
						gaugeUnit[j]:removeSelf()
					end
					gaugeBar.alpha = 0
					physics.stop()
					composer.setVariable("ending_score", tonumber(score.text))
					composer.gotoScene("ending")
				end)
			end
		end
	end
	fan.collision = bear_Fan
	fan:addEventListener("collision")


end

function scene:show( event )
	local sceneGroup = self.view
	local phase = event.phase
	
	if phase == "will" then
		-- Called when the scene is still off screen and is about to move on screen
	elseif phase == "did" then
		-- Called when the scene is now on screen
		-- 
		-- INSERT code here to make the scene come alive
		-- e.g. start timers, begin animation, play audio, etc.
	end	
	physics.start()
end

function scene:hide( event )
	local sceneGroup = self.view
	local phase = event.phase
	
	if event.phase == "will" then
		-- Called when the scene is on screen and is about to move off screen
		--
		-- INSERT code here to pause the scene
		-- e.g. stop timers, stop animation, unload sounds, etc.)
	elseif phase == "did" then
		-- Called when the scene is now off screen
	end
	physics.pause()
end

function scene:destroy( event )
	local sceneGroup = self.view
	
	-- Called prior to the removal of scene's "view" (sceneGroup)
	-- 
	-- INSERT code here to cleanup the scene
	-- e.g. remove display objects, remove touch listeners, save state, etc.
	physics.stop()
end

---------------------------------------------------------------------------------

-- Listener setup
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )

-----------------------------------------------------------------------------------------

return scene
